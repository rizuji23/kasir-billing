generator client {
  provider = "prisma-client-js"
}

// ======== DATABASE CONFIGURATION ========
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ======== ENUMS ========
enum TableStatus {
  ACTIVE
  USED
  AVAILABLE
}

enum TypeMember {
  PREMIUM
  GOLD
  PLATINUM
}

enum StatusMember {
  ACTIVE
  NOTACTIVE
}

enum TypeBooking {
  REGULAR
  LOSS
}

enum StatusBooking {
  ACTIVE
  PAID
  RESET
  NOPAID
}

enum TypeBill {
  ALL
  SPLITBILL
}

enum StatusTransaction {
  PAID
  NOPAID
}

enum SendType {
  KASIR1
  KASIR2
}

enum TypeActivity {
  BOOKING
  ADDDURATION
  ORDERCAFE
  MANUALLAMP
  PAYMENT
  PAYMENTSPLITBILL
  ADDMEMBER
}

// ======== MODELS ========
model User {
  id         Int      @id @default(autoincrement())
  name       String
  username   String      @unique
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  order_cafe OrderCafe[]
  split_bill SplitBill[]
  activities Activity[]  // Rename user_id to activities for clarity
}

model TableBilliard {
  id         Int      @id @default(autoincrement())
  id_table   String      @unique
  name       String
  duration   String
  status     TableStatus @default(AVAILABLE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  bookings   Booking[]
}

model Members {
  id          Int       @id @default(autoincrement())
  id_member   String       @unique
  kode_member String       @unique
  name        String
  no_telp     String       @unique
  email       String       @unique
  type_member TypeMember   @default(PREMIUM)
  start_date  DateTime
  end_date    DateTime
  playing     Int          @default(0)
  status      StatusMember @default(ACTIVE)
  discount    Int
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  bookings    Booking[]
}

model Booking {
  id             Int          @id @default(autoincrement())
  id_booking     String          @unique
  memberId       Int
  member         Members         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  name           String
  tableId        Int
  table          TableBilliard   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  duration       Int
  total_price    Int
  uang_cash      Int?            @default(0)
  discount       Int?            @default(0)
  discount_name  String?
  type_booking   TypeBooking     @default(REGULAR)
  is_blink       Boolean         @default(false)
  status         StatusBooking   @default(NOPAID)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  detail_booking DetailBooking[]
  order_cafe     OrderCafe[]
  split_bill     SplitBill[]
}

model DetailBooking {
  id             Int            @id @default(autoincrement())
  bookingId      Int
  booking        Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  price          Int
  duration       Int
  status         StatusBooking     @default(NOPAID)
  start_duration DateTime
  end_duration   DateTime
  type_bill      TypeBill          @default(ALL)
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  detail_booking SplitBillDetail[]
}

model PriceMember {
  id          Int   @id @default(autoincrement())
  price       Int
  discount    Int
  playing     Int
  type_member String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model CategoryMenu {
  id         Int     @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  menucafe   MenuCafe[]
}

model MenuCafe {
  id                Int            @id @default(autoincrement())
  name              String
  price             Int
  categoryMenuId    Int?
  category_menu     CategoryMenu?     @relation(fields: [categoryMenuId], references: [id], onDelete: SetNull)
  price_sell        Int
  price_modal       Int
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  ordercafe         OrderCafe[]
  split_bill_detail SplitBillDetail[]
}

model OrderCafe {
  id         Int            @id @default(autoincrement())
  id_order_cafe String
  menu_cafe  Int
  menucafe   MenuCafe          @relation(fields: [menu_cafe], references: [id])
  total      Int
  cash       Int
  change     Int
  bookingId  Int
  booking    Booking           @relation(fields: [bookingId], references: [id])
  status     StatusTransaction @default(NOPAID)
  userId     Int
  user_in    User              @relation(fields: [userId], references: [id])
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
}

model Settings {
  id             Int   @id @default(autoincrement())
  label_settings String
  url            String
  content        String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Shift {
  id          Int   @id @default(autoincrement())
  shift       String
  start_hours DateTime
  end_hours   DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model SplitBill {
  id                Int            @id @default(autoincrement())
  id_split_bill     String
  bookingId         Int
  booking_id        Booking           @relation(fields: [bookingId], references: [id])
  name              String
  total             Int
  type_bill         TypeBill          @default(SPLITBILL)
  userId            Int
  user_id           User              @relation(fields: [userId], references: [id])
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  split_bill_detail SplitBillDetail[]
}

model SplitBillDetail {
  id                Int            @id @default(autoincrement())
  splitBillId       Int
  split_bill        SplitBill         @relation(fields: [splitBillId], references: [id])
  menu_cafe         Int?
  menucafe          MenuCafe?         @relation(fields: [menu_cafe], references: [id])
  detail_booking_id Int
  detail_booking    DetailBooking     @relation(fields: [detail_booking_id], references: [id])
  sub_total         Int
  status_bill       StatusTransaction @default(NOPAID)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model Chat {
  id         Int   @id @default(autoincrement())
  text       String
  send_by    SendType
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model Activity {
  id Int @id @default(autoincrement())
  activity String
  userId Int 
  user User @relation(fields: [userId], references: [id])
  type_activity TypeActivity
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}